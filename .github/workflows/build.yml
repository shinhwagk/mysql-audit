name: build
on: [push]
jobs:
  test-golang:
    runs-on: [ubuntu-18.04]
    steps:
      - uses: actions/setup-go@v1
      - run: |
          echo 'package main

          import (
            "fmt"

            "github.com/pingcap/parser"
          )

          func main() {
            fmt.Println("Hello, playground")
            fmt.Println(parser.DigestHash("create table abc.a(a int)"))
            fmt.Println(parser.DigestHash("create table   abc.a(a int  )"))
            fmt.Println(parser.DigestHash("creat1e table   abc.a(a int  )"))
            fmt.Println(parser.DigestHash("select * from db.tab"))
            fmt.Println(parser.DigestHash("select /* a */* from db.tab"))
            fmt.Println(parser.DigestHash("/* a */ select * from db.tab"))
            fmt.Println(parser.DigestHash("select * from db.tab"))
            fmt.Println(parser.TrimComment("   /*aaa */create table   abc.a(a int  )   "))
          }' > main.go
      - run: go get -v github.com/pingcap/parser
      - run: go run main.go
  build-sqlexecuter:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v1.1.1
        with:
          python-version: "3.8"
          architecture: "x64"
      - uses: actions/cache@v1.0.3
        name: action cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        working-directory: ./service-sqlexecuter
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Unit Test
        working-directory: ./service-sqlexecuter
        env:
          port: ${{ job.services.mysql.ports['3306'] }}
          host: 127.0.0.1
          password: password
          user: root
        run: python main_test.py
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@2.9
        with:
          name: shinhwagk/misqlexecuter:0.0.1
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          context: ./service-sqlexecuter
  build-webhook:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@v1.1.0
        with:
          ode-version: "12.x"
      - uses: actions/cache@v1.0.3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@2.9
        with:
          name: shinhwagk/webhook:0.0.1
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          context: ./service-webhook
  build-astparser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-go@v1
        with:
          go-version: "1.13.5"
      - run: |
          go env -w GO111MODULE="on"
      - run: go build -o astparser main.go
        working-directory: ./service-astparser
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@2.9
        with:
          name: shinhwagk/miastparser:0.0.1
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          context: ./service-astparser
  build-email:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-python@v1.1.1
        with:
          python-version: "3.8"
          architecture: "x64"
      - uses: actions/cache@v1.0.3
        name: action cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        working-directory: ./service-email
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@2.9
        with:
          name: shinhwagk/miemail:0.0.1
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          context: ./service-email
